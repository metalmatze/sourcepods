// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListCommitsHandlerFunc turns a function with the right signature into a list commits handler
type ListCommitsHandlerFunc func(ListCommitsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCommitsHandlerFunc) Handle(params ListCommitsParams) middleware.Responder {
	return fn(params)
}

// ListCommitsHandler interface for that can handle valid list commits params
type ListCommitsHandler interface {
	Handle(ListCommitsParams) middleware.Responder
}

// NewListCommits creates a new http.Handler for the list commits operation
func NewListCommits(ctx *middleware.Context, handler ListCommitsHandler) *ListCommits {
	return &ListCommits{Context: ctx, Handler: handler}
}

/*ListCommits swagger:route GET /commits/{owner}/{name} commits listCommits

Get commits of a repository

*/
type ListCommits struct {
	Context *middleware.Context
	Handler ListCommitsHandler
}

func (o *ListCommits) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListCommitsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
